import time
from apscheduler.schedulers.background import BackgroundScheduler

import telebot
from telebot import types
import backend.repo as repo
import logging
import random
import backend.checks as checks

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s',
                    datefmt='%Y-%m-%d %H:%M:%S')

bot = telebot.TeleBot('7424065506:AAHltx0rHaluI_GO-ecKf3HNExQBCCYi0dc')
link = "t.me/Dasha_chat_manager_bot"
scheduler = BackgroundScheduler()


def start_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç")
    item2 = types.KeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–∞—Ç–∞")
    item3 = types.KeyboardButton("–°–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–∞—Ç–∞")
    item4 = types.KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–∞—Ç–∞")
    markup.add(item)
    markup.add(item2)
    markup.add(item3)
    markup.add(item4)
    return markup


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç")
    markup.add(btn1)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –æ–±—â–µ–Ω–∏–µ")
    bot.send_message(message.from_user.id,
                     'üëã –ü—Ä–∏–≤–µ—Ç! –Ø —á–∞—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –î–∞—à–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç"\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –≤–≤–µ–¥–∏—Ç–µ /help',
                     reply_markup=start_menu())

@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.from_user.id, checks.help_output)


@bot.message_handler(func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç")
def add_chat(message):
    bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞:")
    bot.register_next_step_handler(message, save_chat_name)


def save_chat_name(message):
    chat_name = message.text
    repo.add_admin(message.from_user.id, chat_name)
    bot.send_message(message.from_user.id, "–ñ–¥—É, –ø–æ–∫–∞ –≤—ã –¥–æ–±–∞–≤–∏—Ç–µ –º–µ–Ω—è –≤ —á–∞—Ç:)")
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –¥–æ–±–∞–≤–ª—è–µ—Ç –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É {chat_name}")
    current_time = 0
    while repo.chat_cheker(message.from_user.id, chat_name):
        current_time += 1
        if current_time > 500:
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ —É—Å–ø–µ–ª –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É {chat_name}")
            bot.send_message(message.from_user.id, "–í—Ä–µ–º—è –≤—ã—à–ª–æ, —á–∞—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω:(", reply_markup=start_menu())
            return
        time.sleep(1)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É {chat_name}")
    bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –§–ò–û —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –≥—Ä—É–ø–ø–µ:")
    bot.register_next_step_handler(message, save_chat, chat_name)


def save_chat(message, chat_name):
    if not checks.check_members(message.text):
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–ª —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ {chat_name}")
        bot.send_message(message.from_user.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", reply_markup=start_menu())
        return
    repo.add_members(chat_name, message.from_user.id, message.text)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–∞—Ç–∞ {chat_name}")
    bot.send_message(message.from_user.id, "–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")


@bot.message_handler(func=lambda message: message.text == "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–∞—Ç–∞")
def start_registration(message):
    if repo.is_user_exists(message.from_user.id):
        logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–Ω–æ")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn = types.KeyboardButton("—Å–º–µ–Ω–∏—Ç—å –§–ò–û")
        markup.add(btn)
        bot.send_message(message.from_user.id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", reply_markup=markup)
        return
    bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û:")
    bot.register_next_step_handler(message, save_user_name)


def save_user_name(message):
    if not checks.check_regestrtion(message.text):
        logging.info(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è {message.from_user.id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –≤ —Å–≤—è–∑–∏ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º")
        bot.send_message(message.from_user.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", reply_markup=start_menu())
        return
    fio = message.text.split()
    repo.add_user(message.from_user.id, fio)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ–¥ –∏–º–µ–Ω–µ–º {message.text}")
    bot.send_message(message.from_user.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")


@bot.message_handler(func=lambda message: message.text == "—Å–º–µ–Ω–∏—Ç—å –§–ò–û")
def change_user_name_start(message):
    bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û:")
    bot.register_next_step_handler(message, change_user_name)


def change_user_name(message):
    if not checks.check_regestrtion(message.text):
        logging.info("–°–º–µ–Ω–∞ –∏–º–µ–Ω–∏ {message.from_user.id} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –≤ —Å–≤—è–∑–∏ —Å –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º")
        bot.send_message(message.from_user.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", reply_markup=start_menu())
        return
    fio = message.text.split()
    if not repo.is_user_exists(message.from_user.id):
        logging.info("–°–º–µ–Ω–∞ –∏–º–µ–Ω–∏ {message.from_user.id} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –≤ —Å–≤—è–∑–∏ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤–µ–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        bot.send_message(message.from_user.id, "–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", reply_markup=start_menu())
        return
    repo.change_user_name(message.from_user.id, fio)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Å–º–µ–Ω–∏–ª –∏–º—è –Ω–∞ {message.text}")
    bot.send_message(message.from_user.id, "–í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ –∏–º—è")


@bot.message_handler(func=lambda message: message.text == "–°–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–∞—Ç–∞")
def start_changing(message):
    bot.send_message(message.from_user.id, "–í –∫–∞–∫–æ–º —á–∞—Ç–µ?")
    bot.register_next_step_handler(message, get_new_list)


def get_new_list(message):
    members = repo.get_members(message.from_user.id, message.text)
    bot.send_message(message.from_user.id, f"–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫:\n {members}\n\n –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫")
    bot.register_next_step_handler(message, change_chat_users, message.text)


def change_chat_users(message, chat_name):
    if not checks.check_members(message.text):
        logging.info(f"–°–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id} –¥–ª—è —á–∞—Ç–∞ {chat_name} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –≤ —Å–≤—è–∑–∏ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º")
        bot.send_message(message.from_user.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", reply_markup=start_menu())
        return
    repo.add_members(chat_name, message.from_user.id, message.text)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ–±–Ω–æ–≤–∏–ª —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —á–∞—Ç–∞ {chat_name}")
    bot.send_message(message.from_user.id, "–°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω")


@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–∞—Ç–∞")
def start_checking(message):
    bot.send_message(message.from_user.id, f"–í –∫–∞–∫–æ–º —á–∞—Ç–µ –Ω–∞–¥–æ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É?")
    bot.register_next_step_handler(message, checking)


def checking(message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—Ä–æ–≤–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –≤ —á–∞—Ç–µ {message.text}")
    chat_id = repo.get_chat_by_name(message.from_user.id, message.text)
    users_to_output = job(chat_id, True)
    if users_to_output is not None:
        bot.send_message(message.from_user.id, f"–°–ø–∏—Å–æ–∫ —Ç–µ—Ö, –∫—Ç–æ –µ—â–µ –Ω–µ –∑–∞—à–µ–ª –≤ —á–∞—Ç –∏–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è:\n {', '.join(users_to_output)}\n\n")
    else:
        bot.send_message(message.from_user.id, "–í—Å–µ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –µ—Å—Ç—å –≤ —á–∞—Ç–µ")


@bot.message_handler(content_types=['new_chat_members'])
def welcome_new_member(message):
    for new_member in message.new_chat_members:
        chat_id = message.chat.id
        chat_name = message.chat.title
        user_id = message.from_user.id
        if new_member.id == bot.get_me().id:
            if repo.chat_cheker(user_id, chat_name):
                repo.add_chat_to_db(chat_name, chat_id, user_id)
                # scheduler.add_job(job, 'cron', args=[chat_id], hour=time.time() % 86400 // 3600, minute=time.time() % 3600 // 60, id=str(chat_id))
                # scheduler.add_job(job, 'cron', args=[chat_id], hour=19, minute=10, id=str(chat_id))

            else:
                bot.send_message(chat_id, f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ —á–∞—Ç–∞")
                logging.info(f"–ë–æ—Ç –≤—ã—à–µ–ª –∏–∑ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —á–∞—Ç–∞ {chat_name}")
                bot.leave_chat(chat_id)
                return
        else:
            repo.add_chat_user(new_member.id, chat_id)
            bot.send_message(chat_id, f"–ü—Ä–∏–≤–µ—Ç! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–∞—Ç–∞:{link}")


@bot.message_handler(content_types=['left_chat_member'])
def handle_user_left(message):
    if message.left_chat_member.id == bot.get_me().id:
        return
    chat_id = message.chat.id
    user_id = message.left_chat_member.id
    repo.delete_user_by_chat(user_id, chat_id)
    stupid_messages = ['–ù—É –ø–æ–∫–∞(', '–ù–µ –æ—á–µ–Ω—å —Ç–æ –∏ —Ö–æ—Ç–µ–ª–æ—Å—å', '–£ –Ω–µ–≥–æ –º–∞–ª–µ–Ω—å–∫–∏–π —Ö—É–π', '–ê –º–Ω–µ –ø–æ—Ö—É–π –≤–∞—â–µ']
    bot.send_message(chat_id, random.choice(stupid_messages))



def begin():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")


def end():
    logging.info("–ë–æ—Ç –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª —Ä–∞–±–æ—Ç—É")


def job(chat_id, table=False):
    expected_members = repo.get_members_by_chat(chat_id)
    current_members = repo.get_users_by_chat(chat_id)
    needed_members = set(expected_members.copy())

    for user_id in current_members:
        if repo.is_user_exists(user_id):
            name = repo.get_user_name(user_id)
            if name not in expected_members:
                if bot.ban_chat_member(chat_id, user_id):
                    bot.send_message(chat_id,
                                     f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {' '.join(name)} –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —á–∞—Ç–∞, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –Ω–µ—Ç –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                    repo.delete_user_by_chat(user_id, chat_id)
                    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {" ".join(name)} –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —á–∞—Ç–∞ {chat_id}")
            else:
                needed_members.remove(name)

        else:
            if time.time() - repo.get_start_time(user_id, chat_id) > 3 * 24 * 60 * 60:
                if bot.ban_chat_member(chat_id, user_id):
                    bot.send_message(chat_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —á–∞—Ç–∞, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –ø—Ä–æ—à–µ–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
                    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {" ".join(name)} –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —á–∞—Ç–∞ {chat_id}")

        if table:
            return [' '.join(_) for _ in needed_members]
        else:
            return None



def main():
    begin()
    scheduler.start()
    try:
        bot.polling(none_stop=True)
    except KeyboardInterrupt:
        end()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        end()


if __name__ == "__main__":
    main()
